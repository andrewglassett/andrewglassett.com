// Generated by CoffeeScript 1.7.1
(function() {
  var Base, Utils, ejs, fs, path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  Base = require('../base');

  ejs = require('ejs');

  _ = require('lodash');

  Utils = (function(_super) {
    __extends(Utils, _super);

    function Utils(sprout) {
      this.sprout = sprout;
      Utils.__super__.constructor.apply(this, arguments);
    }

    Utils.prototype.read = function(base_path, encoding) {
      var read_path;
      if (encoding == null) {
        encoding = 'utf8';
      }
      read_path = this._full_path(base_path);
      if (fs.existsSync(read_path)) {
        return fs.readFileSync(read_path, encoding);
      }
    };

    Utils.prototype.write = function(base_path, src, opts) {
      var ejs_opts;
      ejs_opts = _.extend(this.sprout.ejs_options, opts);
      return fs.writeFileSync(this._full_path(base_path), ejs.render(src, ejs_opts));
    };

    Utils.prototype.rename = function(source_path, destination_path) {
      return fs.renameSync(this._full_path(source_path), this._full_path(destination_path));
    };

    Utils.prototype.remove = function(base_path) {
      var file, remove_path, _i, _len, _ref, _results;
      _ref = Array.prototype.concat(base_path);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        remove_path = this._full_path(base_path);
        if (fs.existsSync(remove_path)) {
          _results.push(fs.unlinkSync(remove_path));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Utils.prototype.configure = function(config) {
      return this.sprout.config_values = _.extend(this.sprout.config_values, config);
    };

    Utils.prototype._full_path = function(file) {
      return path.resolve(this.sprout.target, file);
    };

    return Utils;

  })(Base);

  module.exports = Utils;

}).call(this);
